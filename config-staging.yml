  staging:
    projectName: everyjob-1020
    env:
      ENVIRONMENT: staging
    clusterDefault: default
    clusterUsername: &staging_clusterUsername thor
    clusterPassword: &staging_clusterPassword "MidgardschlangeRotbart"
    branch: master

    clusters:

      default:
        stackdriverApiKey: "DQF8D8EGW0BBN3RHDLGCLB21MB4X2K1F"

        networks:

          de-01: # identifing name
            ingress:
              # staging-default-network-de-01
              #secretName: network-staging-joblift-de-01  # default: "<profile>-<cluster>-network-<network>" "${result.profile}-${result.cluster}-network-${result.network}
              applicationName: nginx-frontend
              applicationPort: 80
            dns:
              zone: joblift-de
              name: staging.joblift.de. # used for a-record

          nl-01:
            ingress:
              applicationName: nginx-frontend
              applicationPort: 80
            dns:
              zone: joblift-nl
              name: staging.joblift.nl.


        applications:

          # PREPARATIONS
          cloud-sql:
            sqls:
            # staging-cloud-sql-default
            - name: version2
              machineType: db-g1-small
              create: true
              secretName: &staging_dbSecretName staging-cloud-sql-version2
              rootPassword: &staging_dbRootPassword b100dy
              databases:
              # max. 16 characters for user/name/pass
              - name: &staging_deltaService_dbName delta_service
                user: &staging_deltaService_dbUser delta_service
                pass: &staging_deltaService_dbPass d3lt4_s3rv1c3
              - name: &staging_jobitemMatcher_dbName jobitem_matcher
                user: &staging_jobitemMatcher_dbUser jobitem_matcher
                pass: &staging_jobitemMatcher_dbPass j0b1tem_m4tch3r
              - name: &staging_jobalertSubscriber_dbName jobalert_subs
                user: &staging_jobalertSubscriber_dbUser jobalert_subs
                pass: &staging_jobalertSubscriber_dbPass j0b4l3rt_subs
              - name: &staging_statisticsProvider_dbName stats_provider
                user: &staging_statisticsProvider_dbUser stats_provider
                pass: &staging_statisticsProvider_dbPass st4ts_pr0v1d3r
              - name: &staging_seoController_dbName seo_controller
                user: &staging_seoController_dbUser seo_controller
                pass: &staging_seoController_dbPass s30_c0ntr0ll3r


          # INFRASTRUCTURE
          nginx-frontend:
            update: rolling
            healthchecks:
              livenessProbe:
                httpGet:
                  path: /ping
                  port: 80
                initialDelaySeconds: 10
                timeoutSeconds: 1
            ports:
            - port: 80
              name: http
              exposed: 30000

          rabbitmq:
            env:
              MEMORY: 4096
            labels:
              tier: infrastructure
            volumes:
            - size: 50
              path: /var/lib/rabbitmq
            # TODO: we need a vhost name for health checks
            ports:
            - port: 5672
              name: mq
              exposed: 30030
            - port: 15672
              name: admin
              exposed: 30031

          prom-rabbitmq-exporter:
            labels:
              tier: infrastructure
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "9090"
              prometheus.io/path: "/metrics"
            env:
              RABBIT_URL: "http://rabbitmq:15672"
              RABBIT_USER: "guest"
              RABBIT_PASSWORD: "guest"
              PUBLISH_PORT: "9090"
            ports:
            - port: 9090


          ## Monitoring
          monitoring-proxy:
            labels:
              tier: infrastructure
            env:
              DOMAIN_NAME: monitoring.staging.jol.pm
              CERTS_DIR: /var/lib/certs
              CLUSTER_DOMAIN: staging.jol.pm
            loadBalancer:
              enabled: true
              ip: 130.211.110.245
            # TODO!!!
            #healthchecks: *default_http_ping
            ports:
            - port: 443
              name: https
            volumes:
            - path: /etc/caddy/ssl
              volumeType: secret
              secretName: staging-monitoring-ssl-certs

          prom-server:
            labels:
              tier: infrastructure
            healthchecks:
              readinessProbe:
                httpGet:
                  path: /prometheus/metrics
                  port: 9090
                initialDelaySeconds: 5
                timeoutSeconds: 1
            ports:
            - port: 9090
              exposed: 30990
            volumes:
            - size: 50
              path: /prometheus

          prom-alertmanager:
            labels:
              tier: infrastructure
            healthchecks:
              readinessProbe:
                httpGet:
                  path: /metrics
                  port: 9093
                initialDelaySeconds: 5
                timeoutSeconds: 1
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "9093"
            ports:
            - port: 9093
              exposed: 30993
            volumes:
            - size: 10
              path: /alertmanager

          prom-grafana:
            labels:
              tier: infrastructure
            containerImage: grafana/grafana
            containerTag: 2.6.0
            env:
              GF_LOG_MODE: console
              GF_ANALYTICS_REPORTING_ENABLED: false
              GF_ALLOW_SIGN_UP: false
              GF_AUTH_BASIC_ENABLED: false
              GF_SERVER_ROOT_URL: "https://monitoring.s.jol.pm/grafana/"
            ports:
            - port: 3000
              exposed: 30994
            volumes:
            - size: 10
              path: /var/lib/grafana

          prom-es:
            containerImage: flecno/elasticsearch_exporter
            labels:
              tier: infrastructure
            env:
              ES_ALL: true
              ES_URI: http://search-index-client:9200
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "9108"
              prometheus.io/path: "/metrics"
            ports:
            - port: 9108

          elk-elasticsearch:
            labels:
              tier: infrastructure
            volumes:
            - size: 100
              path: /usr/share/elasticsearch/data
            ports:
            - port: 9200
              name: restful
              exposed: 30020
            - port: 9300
              name: native
              exposed: 30021
            env:
              ES_HEAP_SIZE: 4g

          elk-logstash:
            labels:
              tier: infrastructure
            healthchecks:
              livenessProbe:
                tcpSocket:
                  port: 9999
                initialDelaySeconds: 30
                timeoutSeconds: 1
            ports:
            - port: 9999
              name: tcp
              exposed: 30032
            - port: 9899
              name: udp
              exposed: 30033
              protocol: udp

          elk-kibana:
            labels:
              tier: infrastructure
            ports:
            - port: 5601

          # only build the docker container but don't deploy it (disabled in ClusterComponent)
          search-index:
            build: yo!

          # es search-index
          # TODO: healthchecks
          # https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html

          ## master node for es discovery (only?)
          search-index-master:
            labels:
              tier: infrastructure
            containerImage: gcr.io/everyjob-1020/staging-search-index
            env:
              UNICAST_HOSTS: ""
              NODE_MASTER: true
              NODE_DATA: false
              HTTP_ENABLED: false
              CORS_ENABLED: false
            ports:
            - port: 9300
              name: transport

          ## client node for search & index operations also per http
          search-index-client:
            replicas: 2
            labels:
              tier: infrastructure
            update: rolling
            containerImage: gcr.io/everyjob-1020/staging-search-index
            env:
              UNICAST_HOSTS: "search-index-master"
              NODE_MASTER: false
              NODE_DATA: false
            ports:
            - port: 9200
              name: restful
              exposed: 30026
            - port: 9300
              name: transport
              exposed: 30027

          # data nodes to store and index data with persistent data
          #
          ## data 1
          search-index-data-1:
            labels:
              tier: infrastructure
            containerImage: gcr.io/everyjob-1020/staging-search-index
            env:
              UNICAST_HOSTS: "search-index-master"
              NODE_MASTER: false
              NODE_DATA: true
              HTTP_ENABLED: false
              CORS_ENABLED: false
              ES_HEAP_SIZE: 4g
            volumes:
            - size: 100
              path: /usr/share/elasticsearch/data
              diskName: staging-search-index-data-1-default-disk-ssd
              diskType: pd-ssd
            ports:
            - port: 9300
              name: transport

          ## data 2
          search-index-data-2:
            labels:
              tier: infrastructure
            containerImage: gcr.io/everyjob-1020/staging-search-index
            env:
              UNICAST_HOSTS: "search-index-master"
              NODE_MASTER: false
              NODE_DATA: true
              HTTP_ENABLED: false
              CORS_ENABLED: false
              ES_HEAP_SIZE: 4g
            volumes:
            - size: 100
              path: /usr/share/elasticsearch/data
              diskName: staging-search-index-data-2-default-disk-ssd
              diskType: pd-ssd
            ports:
            - port: 9300
              name: transport

          ## data 3
          search-index-data-3:
            labels:
              tier: infrastructure
            containerImage: gcr.io/everyjob-1020/staging-search-index
            env:
              UNICAST_HOSTS: "search-index-master"
              NODE_MASTER: false
              NODE_DATA: true
              HTTP_ENABLED: false
              CORS_ENABLED: false
              ES_HEAP_SIZE: 4g
            volumes:
            - size: 200
              path: /usr/share/elasticsearch/data
            ports:
            - port: 9300
              name: transport

          ## data 4
          search-index-data-4:
            labels:
              tier: infrastructure
            containerImage: gcr.io/everyjob-1020/staging-search-index
            env:
              UNICAST_HOSTS: "search-index-master"
              NODE_MASTER: false
              NODE_DATA: true
              HTTP_ENABLED: false
              CORS_ENABLED: false
              ES_HEAP_SIZE: 4g
            volumes:
            - size: 200
              path: /usr/share/elasticsearch/data
            ports:
            - port: 9300
              name: transport

#          # kibana frontend for search-index
#          search-kibana:
#            labels:
#              tier: infrastructure
#            containerImage: kibana
#            containerTag: 4.3
#            env:
#              ELASTICSEARCH_URL: http://search-index-client:9200
#            ports:
#            - port: 5601
#              exposed: 30025

          ## TODO: more dynamic with multiple data sources and settings from configuration by environment?
          test-index:
            labels:
              tier: infrastructure
            volumes:
            - size: 10
              path: /usr/share/elasticsearch/data
            ports:
            - port: 9200
              name: restful
              exposed: 31026
            - port: 9300
              name: native
              exposed: 31027

          search-kibana:
            labels:
              tier: infrastructure
            ports:
            - port: 5601

          dummy-xml-server:
            labels:
              tier: backend
            ports:
            - port: 8000
              exposed: 30040

          sftp-server:
            loadBalancer:
              enabled: true
              ip: 146.148.12.21
            ports:
            - port: 30022
              name: sftp
            volumes:
            - name: jobfeed-deltas
              size: 10
              path: /home/jobfeed/deltas


          # BACKEND

          scheduler-service:
            labels:
              tier: backend
            env:
              OPTS: -Xmx300M -Xms100M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30100
            - port: 8081
              exposed: 30101

          rawdata-fetcher:
            labels:
              tier: backend
            env:
              OPTS: -Xmx1500M -Xms400M # Xmx(min)=900M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30110
            - port: 8081
              exposed: 30111

          rawdata-transformer:
            labels:
              tier: backend
            env:
              OPTS: -Xmx2g -Xms1g  # Xmx(min)=1500M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30120
            - port: 8081
              exposed: 30121

          delta-service:
            labels:
              tier: backend
            env:
              OPTS: -Xmx2000M -Xms600M
              CERTS_DIR: /var/lib/certs
              CERTS_PASS: *staging_dbRootPassword
              DB_NAME: *staging_deltaService_dbName
              DB_USER: *staging_deltaService_dbUser
              DB_PASS: *staging_deltaService_dbPass
            # healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30130
            - port: 8081
              exposed: 30131
            volumes:
            - path: /var/lib/certs
              volumeType: secret
              secretName: *staging_dbSecretName
              preserve:  true

          jobitem-matcher:
            labels:
              tier: backend
            env:
              OPTS: -Xmx2000M -Xms300M
              CERTS_DIR: /var/lib/certs
              CERTS_PASS: *staging_dbRootPassword
              DB_NAME: *staging_jobitemMatcher_dbName
              DB_USER: *staging_jobitemMatcher_dbUser
              DB_PASS: *staging_jobitemMatcher_dbPass
            # healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30140
            - port: 8081
              exposed: 30141
            volumes:
            - path: /var/lib/certs
              volumeType: secret
              secretName: *staging_dbSecretName
              preserve:  true

          content-tagger:
            labels:
              tier: backend
            env:
              OPTS: -Xmx512M -Xms300M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30146
            - port: 8081
              exposed: 30147

          joboffer-rater:
            labels:
              tier: backend
            env:
              OPTS: -Xmx1000M -Xms300M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30144
            - port: 8081
              exposed: 30145

          joboffer-indexer:
            labels:
              tier: backend
            env:
              OPTS: -Xmx1500M -Xms300M
            # healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30150
            - port: 8081
              exposed: 30151

          statistics-provider:
            labels:
              tier: backend
            env:
              CERTS_DIR: /var/lib/certs
              CERTS_PASS: *staging_dbRootPassword
              DB_NAME: *staging_statisticsProvider_dbName
              DB_USER: *staging_statisticsProvider_dbUser
              DB_PASS: *staging_statisticsProvider_dbPass
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30210
            - port: 8081
              exposed: 30211
            volumes:
            - path: /var/lib/certs
              volumeType: secret
              secretName: *staging_dbSecretName
              preserve:  true

          # JOBALERT

          jobalert-subscriber:
            labels:
              tier: backend
            env:
              OPTS: -Xmx1500M -Xms400M
              CERTS_DIR: /var/lib/certs
              CERTS_PASS: *staging_dbRootPassword
              DB_NAME: *staging_jobalertSubscriber_dbName
              DB_USER: *staging_jobalertSubscriber_dbUser
              DB_PASS: *staging_jobalertSubscriber_dbPass
            # healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30170
            - port: 8081
              exposed: 30171
            volumes:
            - path: /var/lib/certs
              volumeType: secret
              secretName: *staging_dbSecretName
              preserve:  true

          jobalert-agent:
            labels:
              tier: backend
            env:
              OPTS: -Xmx1500M -Xms400M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30180
            - port: 8081
              exposed: 30181

          email-sender:
            labels:
              tier: backend
            env:
              OPTS: -Xmx1500M -Xms400M
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30190
            - port: 8081
              exposed: 30191


          # ADWORDS

          adwords-controller:
            labels:
              tier: backend
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            env:
              OPTS: -Xmx1000M -Xms400M
            ports:
            - port: 8080
              exposed: 30102
            - port: 8081
              exposed: 30103


          # SEO
          seo-controller:
            labels:
              tier: backend
            healthchecks: *default_http_ping
            env:
              CERTS_DIR: /var/lib/certs
              CERTS_PASS: *staging_dbRootPassword
              DB_NAME: *staging_seoController_dbName
              DB_USER: *staging_seoController_dbUser
              DB_PASS: *staging_seoController_dbPass
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30220
            - port: 8081
              exposed: 30221
            volumes:
            - path: /var/lib/certs
              volumeType: secret
              secretName: *staging_dbSecretName
              preserve:  true

          seo-controller-frontend:
            labels:
              tier: frontend
            update: rolling
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30230
            - port: 8081
              exposed: 30231

          # FRONTEND

          web-api:
            labels:
              tier: frontend
            update: rolling
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            env:
              OPTS: -Xmx1500M -Xms400M
            ports:
            - port: 8080
              exposed: 30200
            - port: 8081
              exposed: 30201

          joboffer-searcher:
            labels:
              tier: frontend
            update: rolling
            healthchecks: *default_http_ping
            env:
              OPTS: -Xmx2000M -Xms300M
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8081"
              prometheus.io/path: "/prometheusMetrics"
            ports:
            - port: 8080
              exposed: 30160
            - port: 8081
              exposed: 30161

          web-frontend:
            labels:
              tier: frontend
            update: rolling
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/path: "/metrics"
              prometheus.io/port: "8081"
            ports:
            - port: 8080
              name: http
              exposed: 30300
            - port: 8081
              name: healthcheck
              exposed: 30301

          statistics-webapp:
            labels:
              tier: frontend
            update: rolling
            healthchecks: *default_http_ping
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/path: "/metrics"
              prometheus.io/port: "8081"
            ports:
              - port: 8080
                name: http
                exposed: 30310
              - port: 8081
                name: healthcheck
                exposed: 30311
